import { ConfigService } from "@nestjs/config";
import { BaseService } from "src/core/services/base.service";
import { UserBackofficeEntity } from "src/modules/data-interaction/database/entitites/user-backoffice.entity";
import { UserBackofficeRepository } from "src/modules/data-interaction/database/repositories/backoffice/user/user.repository";
import { EmailFacade } from "src/modules/data-interaction/facade/apis/email/email.facade";
import { CaubFacade } from "src/modules/data-interaction/facade/apis/gov/caubr/caub.facade";
import { ConfeaFacade } from "src/modules/data-interaction/facade/apis/gov/confea/confea.facade";
import { StorageFacade } from "src/modules/data-interaction/facade/apis/storage/storage.facade";
import { CreateUserBackofficeDto } from "./dto/create-user-backoffice.dto";
import { UserRolesBackofficeRepository } from "src/modules/data-interaction/database/repositories/backoffice/user/user-roles.repository";
import { JwtPayloadBackoffice } from "src/core/interfaces/jwt-payload-backoffice.interface";
import { EmailRepository } from "src/modules/data-interaction/database/repositories/backoffice/email/email.repository";
import { UserRegisterPasswordDto } from "./dto/user-register-password.dto";
export declare class UserService extends BaseService<UserBackofficeEntity, CreateUserBackofficeDto, any> {
    private userBackofficeRepository;
    private userRoleBackofficeRepository;
    private readonly caubFacade;
    private readonly confeaFacade;
    private readonly emailFacade;
    private readonly emailRepository;
    private readonly storageFacade;
    private readonly configService;
    constructor(userBackofficeRepository: UserBackofficeRepository, userRoleBackofficeRepository: UserRolesBackofficeRepository, caubFacade: CaubFacade, confeaFacade: ConfeaFacade, emailFacade: EmailFacade, emailRepository: EmailRepository, storageFacade: StorageFacade, configService: ConfigService);
    create(data: CreateUserBackofficeDto): Promise<any>;
    firstAccess(userId: string, data: UserRegisterPasswordDto): Promise<any>;
    private hashStringData;
    getByPayload(payload: JwtPayloadBackoffice): Promise<UserBackofficeEntity>;
    getByEmail(email: string): Promise<UserBackofficeEntity>;
    update(id: string, data: any): Promise<any>;
}
