import { ConfigService } from '@nestjs/config';
import { BaseService } from 'src/core/services/base.service';
import { CreateUserDto } from 'src/modules/data-interaction/database/dtos/user/create-user.dto';
import { UpdateUserProgramTypeDto } from 'src/modules/data-interaction/database/dtos/user/update-user-program-type.dto';
import { UpdateUserDto } from 'src/modules/data-interaction/database/dtos/user/update-user.dto';
import { UserEntity } from 'src/modules/data-interaction/database/entitites/user.entity';
import { AddressRepository } from 'src/modules/data-interaction/database/repositories/address.repository';
import { UserAppointmentRepository } from 'src/modules/data-interaction/database/repositories/user/user-appointment.repository';
import { UserBeneficiaryInfoRepository } from 'src/modules/data-interaction/database/repositories/user/user-beneficiary-info.repository';
import { UserProfessionalInfoRepository } from 'src/modules/data-interaction/database/repositories/user/user-professional-info.repository';
import { UseRestingDayRepository } from 'src/modules/data-interaction/database/repositories/user/user-resting-day.repository';
import { UserRepository } from 'src/modules/data-interaction/database/repositories/user/user.repository';
import { EmailFacade } from 'src/modules/data-interaction/facade/apis/email/email.facade';
import { CaubFacade } from 'src/modules/data-interaction/facade/apis/gov/caubr/caub.facade';
import { ConfeaFacade } from 'src/modules/data-interaction/facade/apis/gov/confea/confea.facade';
import { StorageFacade } from 'src/modules/data-interaction/facade/apis/storage/storage.facade';
import { ConfirmPasswordUpdateRequestDto } from './dtos/confirm-password-update.request.dto';
import { ProfessionalCouncilRegistrationResponseDto } from './dtos/professional-council-resgistration-reponse.dto';
import { UpdateAddressDto } from 'src/modules/data-interaction/database/dtos/address/update-address.dto';
import { MediaUploadDto } from 'src/modules/data-interaction/database/dtos/media/media-upload.dto';
export declare class FeatureUserService extends BaseService<UserEntity, CreateUserDto, UpdateUserDto> {
    private userRepository;
    private userAppointmentRepository;
    private userBeneficiaryInfoRepository;
    private userProfessionalInfoRepository;
    private userRestingdayRepository;
    private addressRepository;
    private readonly caubFacade;
    private readonly confeaFacade;
    private readonly emailFacade;
    private readonly storageFacade;
    private readonly configService;
    constructor(userRepository: UserRepository, userAppointmentRepository: UserAppointmentRepository, userBeneficiaryInfoRepository: UserBeneficiaryInfoRepository, userProfessionalInfoRepository: UserProfessionalInfoRepository, userRestingdayRepository: UseRestingDayRepository, addressRepository: AddressRepository, caubFacade: CaubFacade, confeaFacade: ConfeaFacade, emailFacade: EmailFacade, storageFacade: StorageFacade, configService: ConfigService);
    checkProfessionalUserCaubRegistration(cpf: string): Promise<ProfessionalCouncilRegistrationResponseDto>;
    checkProfessionalUserConfeaRegistration(cpf: string): Promise<ProfessionalCouncilRegistrationResponseDto>;
    create(data: CreateUserDto): Promise<UserEntity>;
    updateById(id: string, data: any): Promise<UserEntity | import("../../data-interaction/database/entitites/address.entity").AddressEntity>;
    updateUserProgramTypeDto(id: string, dto: UpdateUserProgramTypeDto): Promise<import("typeorm").UpdateResult>;
    update(id: string, data: UpdateUserDto): Promise<UserEntity>;
    updateAddress(dto: UpdateAddressDto): Promise<import("../../data-interaction/database/entitites/address.entity").AddressEntity>;
    updateProfilePicture(userId: string, dto: MediaUploadDto): Promise<import("typeorm").UpdateResult>;
    updatePasswordRequest(userId: string): Promise<void>;
    verifyToken(userId: string, token: string): Promise<{
        valid: boolean;
    }>;
    confirmUpdatePasswordRequest(userId: string, dto: ConfirmPasswordUpdateRequestDto): Promise<void>;
    list(): Promise<UserEntity[]>;
    listBeneficiary(): Promise<UserEntity[]>;
    listBeneficiaryByMonth(month: number): Promise<UserEntity[]>;
    getByCpf(cpf: string): Promise<UserEntity>;
    private hashStringData;
    getDashboardDataWithJoinBeneficiary(userId: string): Promise<UserEntity>;
    getDashboardDataWithJoinProfessional(userId: string): Promise<UserEntity>;
}
